"api/createnewgame" 
    body: {
        creatorId: id of the user who created the game
        hundId: id of the hunt 
    }

"api/updatenewgame"

    body: {
        creatorId: id of the user who created the game,
        setting: {
            timeLimitMilliseconds: Number,
            numSubmissionLimit: Number,
        } 
    }

    send: an empty object

"api/newgame"
    query: {
        creatorId: id of the user who created the game
    }

    send: {title: title of the hunt, description: description of the hunt}

"api/gameinfo"
    query: {
        userId: id of the user
    }
    send: { gameId: id of the game, names: [] name of the players}
"api/playerinfo"
    query: {
        userId: id of the user
    }
    body: {
        userId: id of the user 
        millisecondsToSubmit: Number,
    }
    send: ordered {players: [{name: string, numCorrect: number, millisecondsToSubmit: number}]}/ {msg: } if not all players are done, an empty object if there is 
    a post request

"api/startgame"
    body: {
        playerId: id of the player,
    }

"api/initplaygame"
    query: {
        userId: id of the user, 
    }
    
    send {
        game: {setting: , startTime: , numitems:, }
        huntItem: {question: , index: },
        player: {numCorrect: ,}
        submissionItem: {currentSubmission: , isCorrect: , numSubmissions: }
    }

"api/nextquestion" 
    body: {
        userId: id of the user,
        inc: +1/-1
    }

    send {
        huntItem: {question: , index: }
        currentSubmissionItem: {currentSubmission: , isCorrect: , numSubmissions:}
    }

"api/updatesubmission"
    body: {
        userId: id of the user,
        currentSubmission: the submission of the user
    }

    send {
        player: {numCorrect: }
        currentSubmissionItem: {currentSubmissionItem:, isCorrect: , numSubmissions:}
    }

"api/playtag"
    query: {
        userId: id of the user,
    }
    send {
        tag: the html tag submitted
        alreadyCollected: the html tag is already collected
    }

"api/profileinfo"
    body: {
        userId: id of the user,
    }
    send: {
        name: name of the user
        tagPoints: map of the tags and number collected
    }

"api/hunttemplate"
    query: {
        creatorId: id of the user 
    }
    send {huntExists: true if it does false otherwise}

"api/createhunttemplate"
    body: {
        creatorId: id of the user,
        reuse: true if want to reuse / must exist, false otherwise
    }
    send {hunt: {title: title of the hunt, description: description of the hunt}, 
        huntItems: a list of huntitems {question: , answer: }}

"api/createhunt"
    body: {
        creatorId: id of the user
        title: title of the hunt,
        description: description of the hunt,
    }
    send an empty object

"api/deletehunt"
    body: {
        creatorId: id of the user,
    }

"api/newhuntitem"
    body: {
        question: question of the item,
        answer: answer of the item
    }
    send huntItem {question: , answer: }
----------------------------------------
"api/user"
    query: {
        userId: id of the user
    }

    body: {
        userId: id of the user
    }
    send: a user object following the user schema except the googleid!, {msg: "FIRST TIME USER"} if no user has been created

"api/hunt"
    query : {
        (creatorId: creatorId  (optional), 
         isFinalized: true, 
        )
        huntId: id of the hunt (optional)
    }

    body : {
        huntId: id of the hunt (if action = "delete/update")
        action: "add", "delete" , "update",
        creatorId: id of the creator (if action = "add/update")
        title: (if action = "update")
        description: (if action = "update")
        isFinalized: true (if action = "update")
                    false (if action = "add")
    }

    send : Hunt (following the Hunt schema)
