"api/createnewgame" 
    body: {
        creatorId: id of the user who created the game
        hundId: id of the hunt 
    }

"api/updatenewgame"

    body: {
        creatorId: id of the user who created the game,
        setting: {
            timeLimitMilliseconds: Number,
            numSubmissionLimit: Number,
        } 
    }

    send: new setting following the object in the game schema 

"api/newgame"
    query: {
        creatorId: id of the user who created the game
    }

    send: {title: title of the hunt, description: description of the hunt}

"api/createnewplayer"
    body: {
        userId: id of the user
        gameId: id of the game
    }

"api/gameinfo"
    query: {
        userId: id of the user
    }
    send: { gameId: id of the game, names: [] name of the players}
"api/playerinfo"
    query: {
        userId: id of the user
    }
    body: {
        userId: id of the user 
        millisecondsToSubmit: Number,
    }
    send: {name: name of the player}, an empty object if there is 
    a post request

"api/startgame"
    body: {
        playerId: id of the player,
    }

"api/initplaygame"
    query: {
        userId: id of the user, 
    }
    
    send {
        game: {setting: , startTime: , numitems:, }
        huntItem: {question: , index: },
        player: {numCorrect: ,}
        submissionItem: {currentSubmission: , isCorrect: , numSubmissions: }
    }

"api/nextquestion" 
    body: {
        userId: id of the user,
        inc: +1/-1
    }

    send {
        huntItem: {question: , index: }
        currentSubmissionItem: {currentSubmission: , isCorrect: , numSubmissions:}
    }

"api/updatesubmission"
    body: {
        userId: id of the user,
        currentSubmission: the submission of the user
    }

    send {
        player: {numCorrect: }
        currentSubmissionItem: {currentSubmissionItem:, isCorrect: , numSubmissions:}
    }

"api/playtag"
    query: {
        userId: id of the user,
    }
    send {
        tag: the html tag submitted
        alreadyCollected: the html tag is already collected
    }

"api/profileinfo"
    body: {
        userId: id of the user,
    }
    send: {
        name: name of the user
        tagPoints: map of the tags and number collected
    }
----------------------------------------
"api/user"
    query: {
        userId: id of the user
    }

    body: {
        userId: id of the user
    }
    send: a user object following the user schema except the googleid!, {msg: "FIRST TIME USER"} if no user has been created

"api/hunt"
    query : {
        (creatorId: creatorId  (optional), 
         isFinalized: true, 
        )
        huntId: id of the hunt (optional)
    }

    body : {
        huntId: id of the hunt (if action = "delete/update")
        action: "add", "delete" , "update",
        creatorId: id of the creator (if action = "add/update")
        title: (if action = "update")
        description: (if action = "update")
        isFinalized: true (if action = "update")
                    false (if action = "add")
    }

    send : Hunt (following the Hunt schema)

"api/savedhuntitem"
    query: {
        huntId: id of the the hunt
    }

    body: {
        huntId: id of the hunt,
        question: question,
        answer: answer
    }
    body: huntItem 

"api/game"

    body: {
        huntId: id of the hunt (if no action),
        creatorId: id of the creator of the game (if no action),
        gameId: id of the game (if action === delete/update)
        setting: setting of the game (check the game schema)
        action: (for later) "add/delete/update",
    }

    query: {
        creatorId: id of the user (optional),
        gameId: id of the game (optional)
    }

    send: game following game schema

"api/player"

    body: {
        user: a user object {_id: String, name: String}
        gameId: id of the game
    }

    2) for update
    body: {
        playerId: id of the player (if want to update number of questions correct we just need playerId/time),
        millisecondsToSubmit: milliseconds it took to submit (when updating the time)
        itemIndex: index of the item the player is on 
    }

    query: {
        user: a user object {_id: String, name: String}
    }

    send: player following player schema 

"api/deleteplayer"
    body : {
        playerId: id of the player OR
        userId: id of the user
    }

    send: {msg: "DELTED PLAYER"}
"api/playhuntitems"

    query: {
        huntItemIds: list of ids of the hunt
    }

    send: a list of huntitem in the order of huntIds with the _id and question (NO ANSWER)

"api/submission"

    query: {
        playerId: id of the player,
        huntItemId: id of the hunt,
        gameId: id of the game,
    }

    body: {
        playerId: id of the player,
        huntItemId: id of the hunt,
        gameId: id of the game,
        currentSubmission: player's answer, 
        isCorrect: whether the player's answer is correct
    }

    send: a submission item following submssion item schema

"api/checkanswer"

    query: {
        huntItemId: id of the the hunt item to check
        currentSubmission: the user's submission for the item
    }

    send: {isCorrect: true if correct/ false otherwise}
