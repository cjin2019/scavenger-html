"api/createhunt"
    body: {
        creatorId: String/later user login,
        title: String,
        description: String,
        createId: String, 
    }

    huntItem {
        huntId: id of the hunt the item corresponds,
        createId: id of the create page,
        question: (String/later add files and stuff) question of the item,
        answer: (String/later add more fancy stuff) answer of the item
    }

    send {
        succeed: true,
    }

"api/hunt"
    query : {
        creatorId: creatorId (optional),
        huntId: id of the hunt (optional)
    }

    send : Hunt (following the Hunt schema)

"api/createpage" 
    query: {
        userId: userId,
    }

    body: {
        userId: userId,
        action: [] delete/add (enum type in createpage)
    }

    if delete
    send {
        msg: "deleted"
    } add
    send createpage model object 

"api/savedhuntitem"
    query: {
        createId: id of the createpage
    }

    body: huntItem 

"api/game"

    body: {
        huntId: id of the hunt,
        creatorId: id of the creator of the game,
        action: (for later) "add/delete"
    }

    query: {
        creatorId: id of the user (optional),
        gameId: id of the game (optional)
    }

    send: game following game schema

"api/player"

    body: {
        user: a user object {_id: String, name: String}
        gameId: id of the game
    }

    2) for update
    body: {
        playerId: id of the player,
        itemIndex: index of the item the player is on
    }

    query: {
        user: a user object {_id: String, name: String}
    }

    send: player following player schema 